package main

import (
	"fmt"
)

// Practical Use Case
// 		Resource Clean Up
// 		Unlocking Mutexes
// 		Logging and Tracing

// Best Practices
// 		Keep Deffered Action Short
// 		Understand Evaluation Timing
//		Avoid Complex Control Flow 

func main() {
	process(10)
}

func process(i int) {
	defer fmt.Println("Deffered i value:", i)
	defer fmt.Println("First Deferred statement executed")
	defer fmt.Println("Second Deferred statement executed")
	defer fmt.Println("Third Deferred statement executed")
	i++
	defer fmt.Println("2 Deffered i value:", i)

	fmt.Println("Normal execution statement")
}

// func deferExample() int {
// 	a := 10

// 	defer func(val int) {
// 		fmt.Println("First", val)
// 	}(a)

// 	a = 20
// 	defer func(val int) {
// 		fmt.Println("Second", val)
// 	}(a)

// 	a = 30
// 	defer func(val int) {
// 		fmt.Println("Exit", val)
// 	}(a)

// 	return a
// }
