package main

import "fmt"

func main() {
	// Slices are REFERENCES to UNDERLYING ARRAYS

	// var sliceName = []elementType{value, value}
	// var sliceName []int = []int{2, 2, 3}

	// var mySlice []int

	// if mySlice == nil {
	// 	fmt.Println("Yes is nil")
	// } else {
	// 	fmt.Println("Yes is not nil")
	// }

	// Builtin function of Slice

	// var slice_1 []int = []int{1, 2, 3}
	// var slice_2 []int = []int{3, 2, 1}

	// fmt.Println(slices.Equal(slice_1, slice_2))

	// x := []int{1, 2, 3, 4, 5}
	// y := []int{1, 2, 3, 4, 5}
	// z := []int{1, 2, 3, 4, 5, 6}
	// s := []string{"a", "b", "c"}

	// fmt.Println(slices.Equal(x, y))
	// fmt.Println(slices.Equal(x, z))
	// fmt.Println(reflect.DeepEqual(2, 2))
	// fmt.Println(slices.Equal(x, s))

	// var x []int

	// fmt.Println(len(x))

	// append

	// var x []int

	// x = append(x, 1, 2, 3, 4, 5)

	// fmt.Println(x)

	// var x = []int{3, 4}

	// var y []int = []int{1, 2}

	// y = append(y, x...)

	// fmt.Println(y)

	// x := [5]int{1, 2, 3, 4, 5}

	// y := x[0:3]
	// fmt.Println(y)

	// y = append(y, 1)
	// y = append(y, 2)
	// y = append(y, 3)
	// y = append(y, 4)
	// y = append(y, 5)

	// fmt.Println(y)

	// var x []int

	// fmt.Println(x, len(x), cap(x))

	// x = append(x, 10)
	// fmt.Println(x, len(x), cap(x))
	// x = append(x, 20)
	// fmt.Println(x, len(x), cap(x))
	// x = append(x, 30)
	// fmt.Println(x, len(x), cap(x))
	// x = append(x, 40)
	// fmt.Println(x, len(x), cap(x))
	// x = append(x, 50)
	// fmt.Println(x, len(x), cap(x))

	// _slice := make([]int, 2, 8)
	// s := append(_slice, 1)

	// fmt.Println(&_slice[0] == &s[0])
	// fmt.Println(&_slice[0])
	// fmt.Println(s[2])

	// var numbers []int
	// var nums = []int{1, 2, 3}

	// numbers := []int{9, 8, 7}

	// slice := make([]int, 2)

	// var numbers []int
	// slice := []int{}

	// slice = append(slice, 10)

	// for i := range 1000 {
	// 	slice = append(slice, i)
	// 	fmt.Println(len(slice), cap(slice))
	// }

	// x := make([]int, 5)

	// fmt.Println(len(x), cap(x))

	// x = append(x, 1)
	// fmt.Println(len(x), cap(x))
	// x = append(x, 1)
	// x = append(x, 1)
	// x = append(x, 1)
	// x = append(x, 1)
	// x = append(x, 1)
	// fmt.Println(len(x), cap(x))

	// for i := range 10 {
	// 	x = append(x, i)
	// }
	// fmt.Println(len(x), cap(x))

	// x := []string{"a", "b", "c", "d"}

	// y := x[:2]
	// z := x[1:]
	// d := x[1:3]
	// e := x[:]

	// fmt.Println("x", x)
	// fmt.Println("y", y)
	// fmt.Println("z", z)
	// fmt.Println("d", d)
	// fmt.Println("e", e)

	// len, cap
	// cap: capacity
	// len: actual using

	// s1 := []int{1, 2, 3, 4, 5}
	// fmt.Println("s1", s1)

	// s2 := s1[2:4]

	// fmt.Println(cap(s2))
	// s2[0] = 3 //backing array

	// fmt.Println("s2", s2)
	// fmt.Println("s1", s1)

	// x := [4]int{5, 6, 7, 8}

	// y := x[:2]
	// z := x[2:]

	// x[0] = 10

	// fmt.Println(y)
	// fmt.Println(z)

	// x := []int{1, 2, 3, 4, 5, 6}

	// fullArray := [6]int(x)
	// smallArray := [2]int(x)
	// x[0] = 10
	// fmt.Println(fullArray)
	// fmt.Println(smallArray)

	// var numbers []int = []int{1, 2, 3, 4}

	// numbers := []int{9, 8, 7}

	// sliceMake := make([]int, 0, 9)

	// Create slice from an array
	// These slice ref array !

	//			0 [1  2  3] 4
	//			0  1  2 [3  4]
	//		   [0  1] 2  3  4
	// a := [5]int{1, 2, 3, 4, 5}

	// xSlice := a[1:4] // Slice interfaces to manage array
	// xSlice_2 := a[3:]
	// xSlice_3 := a[:2]

	// fmt.Println(xSlice) //[1  2  3]
	// xSlice[1] = 3
	// fmt.Println(xSlice_2) // [3 4]
	// fmt.Println(xSlice_3) // [1 2] [1 3]

	// Copy slice into new array is fine

	// a := []int{1, 2, 3, 4}
	// b := []int{5, 6, 7}

	// a = append(a, b...)
	// fmt.Println(a)

	// sliceCopy := make([]int, len(a)) // Make a cap

	// copy(sliceCopy, a)

	// fmt.Println(slices.Equal(sliceCopy, a))

	// var nilSlice []int

	// a := []int{1, 2, 3, 4}

	// for i, v := range a {
	// 	fmt.Println(i, v)
	// }

	// fmt.Println(a[3])

	// copy
	// len
	// cap
	// equal

	// arr_1 := [3]int{1, 2, 3}
	// arr_2 := [3]int{1, 2, 3}

	// slice1 := []string{"a", "b", "c", "d", "e", "f"}

	// slice2 := slices.Clone(slice1)

	// fmt.Println(slices.Equal(slice1, slice2))

	// slice1 = slices.Delete(slice1, 2, 3)

	// fmt.Println(slice1)
	// for i, v := range slices.All(slice1) {
	// 	fmt.Println(i, ":", v)
	// }

	// for i, v := range slice1 {
	// 	fmt.Println(i, ":", v)
	// }

	// twoD := make([][]int, 3)

	// for i := 0; i < 3; i++ {
	// 	innerLen := i + 1

	// 	twoD[i] = make([]int, innerLen)

	// 	for j := 0; j < innerLen; j++ {
	// 		twoD[i][j] = i + j
	// 	}
	// }

	// fmt.Println(twoD)

	// DEEP DIVE

	// a := []int{1, 2, 3}
	// // var c []int
	// b := []int{}
	// fmt.Println(a)
	// fmt.Println(b == nil)

	x := []int{1, 2, 3, 4}
	y := x[:3]

	y[2] = 999
	fmt.Println(x)
}
