package main

import "fmt"

// func swap[T any](a, b T) (T, T) {
// 	return b, a
// }

type Stack[T any] struct {
	elements []T
}

func (s *Stack[T]) push(element T) {
	(*s).elements = append(s.elements, element)
}

func (s *Stack[T]) pop() (T, bool) {

	if len(s.elements) == 0 {
		var zeroValue T
		return zeroValue, false
	}

	element := s.elements[len(s.elements)-1]
	(*s).elements = s.elements[0 : len(s.elements)-1]

	return element, true
}

func (s *Stack[T]) isEmpty() bool {
	return len(s.elements) == 0
}

func (s Stack[T]) printAll() {
	if len(s.elements) == 0 {
		fmt.Println("The stack is empty")
		return
	}

	for _, element := range s.elements {
		fmt.Println(element)
	}
}

func main() {
	// e := Stack[int]{
	// 	elements: []int{1, 2, 3, 9, 7},
	// }

	// e.push(2)
	// fmt.Println(e)

	// element, ok := e.pop()

	// fmt.Println(element, ok)

	// x, y := 1, 2

	// x, y = swap(x, y)
	// fmt.Println(x, y)

	// x1, y1 := "John", "Jane"

	// x1, y1 = swap(x1, y1)
	// fmt.Println(x1, y1)

	intStack := Stack[int]{}
	intStack.push(1)

	fmt.Println(intStack)

}
